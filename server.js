// server.js (—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏)
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –ø–ª–∞—Ç–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const PAID_USERS_PATH = path.join(__dirname, 'paid_users.json');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
let paidUsers = new Set();
try {
  const data = fs.readFileSync(PAID_USERS_PATH, 'utf8');
  const ids = JSON.parse(data);
  paidUsers = new Set(ids);
  console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', [...paidUsers]);
} catch (err) {
  console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å paid_users.json, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.');
  fs.writeFileSync(PAID_USERS_PATH, JSON.stringify([]));
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function savePaidUsers() {
  fs.writeFileSync(PAID_USERS_PATH, JSON.stringify([...paidUsers], null, 2));
}

// /addpaid @username
bot.command('addpaid', async (ctx) => {
  const adminId = parseInt(process.env.ADMIN_ID);
  if (ctx.from.id !== adminId) return ctx.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");

  const args = ctx.message.text.split(" ");
  if (args.length < 2 || !args[1].startsWith("@")) {
    return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpaid @username");
  }

  const username = args[1].substring(1);
  try {
    const chat = await bot.telegram.getChat(`@${username}`);
    paidUsers.add(chat.id);
    savePaidUsers();
    ctx.reply(`‚úÖ @${username} (ID: ${chat.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É.`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", err);
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
});

// /listpaid
bot.command('listpaid', async (ctx) => {
  const adminId = parseInt(process.env.ADMIN_ID);
  if (ctx.from.id !== adminId) return ctx.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");

  const list = [...paidUsers];
  if (list.length === 0) return ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç.");
  ctx.reply(`üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${list.length}):\n` + list.map(id => `‚Ä¢ ${id}`).join("\n"));
});

// /remove @username
bot.command('remove', async (ctx) => {
  const adminId = parseInt(process.env.ADMIN_ID);
  if (ctx.from.id !== adminId) return ctx.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");

  const args = ctx.message.text.split(" ");
  if (args.length < 2 || !args[1].startsWith("@")) {
    return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove @username");
  }

  const username = args[1].substring(1);
  try {
    const chat = await bot.telegram.getChat(`@${username}`);
    if (!paidUsers.has(chat.id)) {
      return ctx.reply(`‚ö†Ô∏è @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫–µ.`);
    }
    paidUsers.delete(chat.id);
    savePaidUsers();
    ctx.reply(`‚úÖ @${username} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", err);
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
});
