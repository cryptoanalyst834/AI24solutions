// === –ò–ú–ü–û–†–¢–´ ===
const express = require('express');
const bodyParser = require('body-parser');
const { Telegraf } = require('telegraf');
const cors = require('cors');
const { OpenAI } = require("openai");
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
const app = express();
app.use(cors());
app.use(bodyParser.json());

app.use((req, res, next) => {
  console.log(`‚û°Ô∏è ${req.method} ${req.url}`);
  next();
});

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: "https://openrouter.ai/api/v1",
  defaultHeaders: {
    "HTTP-Referer": "https://ai24solutions.onrender.com/",
    "X-Title": "AI24SolutionsBot"
  }
});

// === –ü–û–î–ü–ò–°–ö–ò ===
const PAID_USERS_PATH = path.join(__dirname, 'paid_users.json');
let paidUsers = new Set();
try {
  const data = fs.readFileSync(PAID_USERS_PATH, 'utf8');
  const ids = JSON.parse(data);
  paidUsers = new Set(ids);
  console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', [...paidUsers]);
} catch (err) {
  console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å paid_users.json, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.');
  fs.writeFileSync(PAID_USERS_PATH, JSON.stringify([]));
}
function savePaidUsers() {
  fs.writeFileSync(PAID_USERS_PATH, JSON.stringify([...paidUsers], null, 2));
}

// === –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê ===
bot.command('addpaid', async (ctx) => {
  if (ctx.from.id !== parseInt(process.env.ADMIN_ID)) return ctx.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  const args = ctx.message.text.split(" ");
  if (args.length < 2 || !args[1].startsWith("@")) return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpaid @username");
  const username = args[1].substring(1);
  try {
    const chat = await bot.telegram.getChat(`@${username}`);
    paidUsers.add(chat.id);
    savePaidUsers();
    ctx.reply(`‚úÖ @${username} (ID: ${chat.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É.`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", err);
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
});

bot.command('listpaid', async (ctx) => {
  if (ctx.from.id !== parseInt(process.env.ADMIN_ID)) return ctx.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  const list = [...paidUsers];
  if (list.length === 0) return ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç.");
  ctx.reply(`üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${list.length}):\n` + list.map(id => `‚Ä¢ ${id}`).join("\n"));
});

bot.command('remove', async (ctx) => {
  if (ctx.from.id !== parseInt(process.env.ADMIN_ID)) return ctx.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  const args = ctx.message.text.split(" ");
  if (args.length < 2 || !args[1].startsWith("@")) return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove @username");
  const username = args[1].substring(1);
  try {
    const chat = await bot.telegram.getChat(`@${username}`);
    if (!paidUsers.has(chat.id)) return ctx.reply(`‚ö†Ô∏è @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫–µ.`);
    paidUsers.delete(chat.id);
    savePaidUsers();
    ctx.reply(`‚úÖ @${username} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", err);
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
});
