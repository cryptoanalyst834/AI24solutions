const express = require('express');
const bodyParser = require('body-parser');
const { Telegraf } = require('telegraf');
const cors = require('cors');
const { OpenAI } = require("openai");
require('dotenv').config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

app.use((req, res, next) => {
  console.log(`‚û°Ô∏è ${req.method} ${req.url}`);
  next();
});

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: "https://openrouter.ai/api/v1",
  defaultHeaders: {
    "HTTP-Referer": "https://ai24solutions.onrender.com/",
    "X-Title": "AI24SolutionsBot"
  }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º webhook –∫ Express
app.use(bot.webhookCallback('/telegram'));

// === /start ===
bot.start((ctx) => {
  const name = ctx.from.first_name || '–¥—Ä—É–≥';
  ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${name}! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è —Å –ò–ò.`, {
    reply_markup: {
      keyboard: [[{ text: 'üìù –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑', web_app: { url: process.env.WEB_APP_URL } }]],
      resize_keyboard: true,
    },
  });
});

// === FSM –¥–ª—è AI-—Ä–µ–∂–∏–º–∞ ===
const awaitingAIQuestion = new Set();

bot.command('ai', (ctx) => {
  awaitingAIQuestion.add(ctx.from.id);
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ AI, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å üôÇ');
});

bot.on('text', async (ctx) => {
  if (!awaitingAIQuestion.has(ctx.from.id)) return;

  const question = ctx.message.text;
  const estimatedLength = question.length;
  const user = ctx.from;
  const maxTokens = estimatedLength > 700 ? 1000 : estimatedLength > 300 ? 800 : 400;

  const primaryModel = "gpt-4o";
  const fallbackModel = "gpt-3.5-turbo";

  // –û—Ç–ø—Ä–∞–≤–∏–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  const adminLog = `üì® –ù–æ–≤—ã–π AI-–≤–æ–ø—Ä–æ—Å:\nüë§ ${user.first_name} (@${user.username || "–Ω–µ—Ç username"})\nüß† –í–æ–ø—Ä–æ—Å: ${question}`;
  await bot.telegram.sendMessage(process.env.ADMIN_ID, adminLog);

  try {
    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: question }],
      model: primaryModel,
      max_tokens: maxTokens
    });

    const reply = completion.choices[0]?.message?.content || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.";
    await ctx.reply(reply);

    // –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await bot.telegram.sendMessage(process.env.ADMIN_ID, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ú–æ–¥–µ–ª—å: ${primaryModel}`);
  } catch (err) {
    const errorMessage = err.response?.data || err.message || err;
    console.error("‚ùå GPT ERROR:", errorMessage);

    const isLimitError = JSON.stringify(errorMessage).includes("402");

    if (isLimitError) {
      try {
        const fallback = await openai.chat.completions.create({
          messages: [{ role: "user", content: question }],
          model: fallbackModel,
          max_tokens: Math.min(400, maxTokens)
        });

        const reply = fallback.choices[0]?.message?.content || "–û—Ç–≤–µ—Ç –æ—Ç fallback-–º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.";
        await ctx.reply(`‚ö†Ô∏è GPT-4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–≤–µ—Ç –æ—Ç GPT-3.5:\n\n${reply}`);

        // –õ–æ–≥ –¥–ª—è –∞–¥–º–∏–Ω–∞
        await bot.telegram.sendMessage(process.env.ADMIN_ID, `‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ fallback-–º–æ–¥–µ–ª—å (${fallbackModel})`);
      } catch (e2) {
        const err2 = e2.response?.data || e2.message || e2;
        console.error("‚ùå Fallback GPT-3.5 Error:", err2);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ GPT-3.5.");
        await bot.telegram.sendMessage(process.env.ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞ fallback-–º–æ–¥–µ–ª–∏ GPT-3.5");
      }
    } else {
      await ctx.reply("–û—à–∏–±–∫–∞ AI: " + JSON.stringify(errorMessage).slice(0, 300) + "...");
    }
  }

  awaitingAIQuestion.delete(ctx.from.id);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∏–∑–∞ ===
app.post('/send-results', async (req, res) => {
  const { name, email, answers } = req.body;
  const message = `üì• –ù–æ–≤—ã–π –∫–≤–∏–∑:\nüë§ –ò–º—è: ${name}\nüí¨ Telegram: ${email}\nüß† –û—Ç–≤–µ—Ç—ã:\n${answers.join('\n')}`;
  try {
    await bot.telegram.sendMessage(process.env.ADMIN_ID, message);
    res.status(200).send('OK');
  } catch (err) {
    const errorMessage = err.response?.data || err.message || err;
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", errorMessage);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
  }
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook ===
bot.launch({
  webhook: {
    domain: process.env.DOMAIN,
    port: process.env.PORT || 3000,
  }
});

console.log('‚úÖ Webhook –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Telegraf');
