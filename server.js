const express = require('express');
const bodyParser = require('body-parser');
const { Telegraf } = require('telegraf');
const cors = require('cors');
const { OpenAI } = require("openai");
require('dotenv').config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ –∏ OpenAI ===
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// === –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π ===
bot.start((ctx) => {
  const name = ctx.from.first_name || '–¥—Ä—É–≥';
  ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${name}! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è —Å –ò–ò.`, {
    reply_markup: {
      keyboard: [[{ text: 'üìù –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑', web_app: { url: process.env.WEB_APP_URL } }]],
      resize_keyboard: true,
    },
  });
});

// === –ö–æ–º–∞–Ω–¥–∞ /ai –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ ===
bot.command('ai', (ctx) => {
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ AI, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å üôÇ');

  // ‚õî –í–ê–ñ–ù–û: –∏–∑–±–µ–≥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
  const handler = async (ctx2) => {
    try {
      const completion = await openai.chat.completions.create({
        messages: [{ role: "user", content: ctx2.message.text }],
        model: "gpt-4o", // –∏–ª–∏ "gpt-3.5-turbo" –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
      });

      const reply = completion.choices[0]?.message?.content || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.";
      await ctx2.reply(reply);

      // –ü–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      bot.off('text', handler);
    } catch (err) {
      console.error(err);
      await ctx2.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI.");
    }
  };

  bot.on('text', handler);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å
