const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { Telegraf, Markup } = require('telegraf');
const { google } = require('googleapis');
const path = require('path');
const dotenv = require('dotenv');
const { OpenAI } = require('openai');

dotenv.config();
const app = express();
app.use(cors());
app.use(bodyParser.json());

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: 'https://openrouter.ai/api/v1',
  defaultHeaders: {
    "HTTP-Referer": "https://ai24solutions.onrender.com/",
    "X-Title": "AI24SolutionsBot"
  }
});

const auth = new google.auth.GoogleAuth({
  keyFile: path.join(__dirname, 'credentials.json'),
  scopes: ['https://www.googleapis.com/auth/spreadsheets']
});
const SPREADSHEET_ID = '1CajOn3ncsj8h21uxAk10XQWJTD40R6195oJKGSQPJaQ';
const SHEET_NAME = '–õ–∏—Å—Ç2';

const mainMenu = Markup.keyboard([
  ['üí° –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç AI24', 'üìù –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑'],
  ['ü§ñ –ó–∞–¥–∞—Ç—å AI-–≤–æ–ø—Ä–æ—Å']
]).resize();

const assistantOptions = [
  "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
  "–ß–∞—Ç-–±–æ—Ç—ã –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã",
  "–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º",
  "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ò–ò-—Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥ –∑–∞–¥–∞—á—É"
];

const assistantResponses = {
  "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤": "üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ai24solutions.ru/audits",
  "–ß–∞—Ç-–±–æ—Ç—ã –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã": "ü§ñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ai24solutions.tilda.ws/chat-bots",
  "–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º": "üéì –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ai24solutions.ru/educations",
  "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ò–ò-—Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥ –∑–∞–¥–∞—á—É": "üìà –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ai24solutions.ru/analytics"
};

const awaitingAI = new Set();

bot.start((ctx) => {
  const name = ctx.from.first_name || '–¥—Ä—É–≥';
  ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${name}! –Ø ‚Äî –±–æ—Ç AI24Solutions ü§ñ`, mainMenu);
});

bot.hears('üí° –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç AI24', (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', Markup.keyboard(assistantOptions.map(o => [o])).resize());
});
assistantOptions.forEach((text) => {
  bot.hears(text, (ctx) => {
    ctx.reply(assistantResponses[text]);
  });
});

bot.hears('ü§ñ –ó–∞–¥–∞—Ç—å AI-–≤–æ–ø—Ä–æ—Å', (ctx) => {
  awaitingAI.add(ctx.from.id);
  ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å üí¨');
});

bot.on('text', async (ctx) => {
  const id = ctx.from.id;
  const text = ctx.message.text;
  if (awaitingAI.has(id)) {
    awaitingAI.delete(id);
    try {
      const res = await openai.chat.completions.create({
        model: 'gpt-4o',
        max_tokens: 1000,
        temperature: 0.7,
        messages: [{ role: 'user', content: text }]
      });
      const reply = res.choices[0]?.message?.content || '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.';
      await ctx.reply(reply);
    } catch (err) {
      console.error("‚ùå AI Error:", err.message || err);
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.");
    }
  }
});

bot.hears('üìù –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑', async (ctx) => {
  await ctx.reply('–û—Ç–∫—Ä–æ–π—Ç–µ –∫–≤–∏–∑ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:', {
    reply_markup: {
      inline_keyboard: [[{
        text: 'üöÄ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑',
        web_app: { url: process.env.WEB_APP_URL }
      }]]
    }
  });
});

app.post('/send-results', async (req, res) => {
  const { name, email, answers } = req.body;
  console.log('üì© –ö–≤–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', req.body);
  const message = `üì• –ù–æ–≤—ã–π –∫–≤–∏–∑:\nüë§ ${name}\nüì¨ ${email}\nüß† ${answers.join('\n')}`;
  
  try {
    await bot.telegram.sendMessage(process.env.ADMIN_ID, message);
    const authClient = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: authClient });
    const now = new Date().toLocaleString('ru-RU');
    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A1`,
      valueInputOption: 'USER_ENTERED',
      requestBody: {
        values: [[now, name, email, ...answers]]
      }
    });
    res.status(200).send('OK');
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e.message || e);
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏');
  }
});

app.get('/', (_, res) => res.send('‚úÖ –ë–æ—Ç AI24Solutions —Ä–∞–±–æ—Ç–∞–µ—Ç'));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}`));
bot.launch();
console.log('ü§ñ –ë–æ—Ç AI24Solutions –∑–∞–ø—É—â–µ–Ω');
